substitutions:
  board: esp01_1m
  channel_1: relay 1
  channel_2: relay 2
  max_power: "2000.0"
  max_temp: "80.0"

packages:
  base:   !include device_base_esp8266.yaml
  logger: !include logger.yaml


i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953
    irq_pin: GPIO16 # Prevent overheating by setting this
    voltage:
      name: ${device_name} voltage
      filters:
        - throttle: 5s
    # On the Shelly 2.5 channels are mixed ch1=B ch2=A
    current_a:
      name: ${device_name} ${channel_2} current
      id: open_current
      internal: true
    current_b:
      name: ${device_name} ${channel_1} current
      id: close_current
      internal: true
    active_power_a:
      name: ${device_name} ${channel_2} power
      id: power_channel_2
      # active_power_a is normal, so don't multiply by -1
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: close_relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${device_name}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W
    active_power_b:
      name: ${device_name} ${channel_1} power
      id: power_channel_1
      # active_power_b is inverted, so take the absolute value
      filters:
        - lambda: return abs(x);
      on_value_range:
        - above: ${max_power}
          then:
            - switch.turn_off: open_relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${device_name}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W
    update_interval: 5s

  - platform: total_daily_energy
    name: ${device_name} ${channel_1} energy
    power_id: power_channel_1
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: ${device_name} ${channel_2} energy
    power_id: power_channel_2
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${device_name} temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - switch.turn_off: open_relay
          - switch.turn_off: close_relay
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${device_name}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

status_led:
  pin:
    number: GPIO0
    inverted: yes

switch:
  - platform: gpio
    id: open_relay
    name: ${device_name} ${channel_1} relay
    pin: GPIO4
    icon: "mdi:window-shutter-open"
    restore_mode: RESTORE_DEFAULT_OFF
    # Ensure only one switch at a time is on (https://esphome.io/components/switch/gpio.html#interlocking)
    interlock: &interlock [open_relay, close_relay]
    interlock_wait_time: 200ms
    internal: true

  - platform: gpio
    id: close_relay
    name: ${device_name} ${channel_2} relay
    pin: GPIO15
    icon: "mdi:window-shutter"
    restore_mode: RESTORE_DEFAULT_OFF
    interlock: *interlock
    interlock_wait_time: 200ms
    internal: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
    name: "${device_name} ${channel_1} input"
    on_press:
      then:
        cover.open: roller
  - platform: gpio
    pin:
      number: GPIO5
    name: "${device_name} ${channel_2} input"
    on_press:
      then:
        cover.close: roller
  - platform: gpio
    pin: 
      number: GPIO16
    name: "ade7953 IRQ pin"
    internal: true

cover:
  - platform: time_based
    name: ${device_name}
    id: roller

    open_duration: 26s
    open_action:
      - switch.turn_on: open_relay

    close_duration: 26s
    close_action:
      - switch.turn_on: close_relay

    stop_action:
      - switch.turn_off: close_relay
      - switch.turn_off: open_relay

    #manual_control: true
    assumed_state: true